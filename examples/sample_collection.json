{
  "id": "sample-collection",
  "name": "Sample API Collection",
  "description": "A sample collection demonstrating various API testing features",
  "requests": [
    {
      "id": "get-users",
      "name": "Get Users",
      "method": "GET",
      "url": "https://jsonplaceholder.typicode.com/users",
      "headers": {
        "Accept": "application/json",
        "User-Agent": "API-Tester/1.0"
      },
      "params": {},
      "body": "",
      "body_type": "none",
      "pre_request_script": "// Set a timestamp for this request\npm.environment.set('request_timestamp', new Date().toISOString());",
      "tests": "// Test status code\npm.test('Status code is 200', function () {\n    pm.response.to.have.status(200);\n});\n\n// Test response time\npm.test('Response time is less than 1000ms', function () {\n    pm.expect(pm.response.responseTime).to.be.below(1000);\n});\n\n// Test JSON response\npm.test('Response is valid JSON', function () {\n    pm.response.to.be.json;\n});\n\n// Test response structure\npm.test('Response contains users array', function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('array');\n    pm.expect(jsonData.length).to.be.above(0);\n});",
      "description": "Retrieve a list of users from the JSONPlaceholder API",
      "created_at": "2024-01-01T00:00:00",
      "updated_at": "2024-01-01T00:00:00"
    },
    {
      "id": "get-user-by-id",
      "name": "Get User by ID",
      "method": "GET",
      "url": "https://jsonplaceholder.typicode.com/users/{{user_id}}",
      "headers": {
        "Accept": "application/json"
      },
      "params": {},
      "body": "",
      "body_type": "none",
      "pre_request_script": "",
      "tests": "pm.test('Status code is 200', function () {\n    pm.response.to.have.status(200);\n});\n\npm.test('User has required fields', function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('email');\n});",
      "description": "Retrieve a specific user by ID using environment variable",
      "created_at": "2024-01-01T00:00:00",
      "updated_at": "2024-01-01T00:00:00"
    },
    {
      "id": "create-user",
      "name": "Create User",
      "method": "POST",
      "url": "https://jsonplaceholder.typicode.com/users",
      "headers": {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      "params": {},
      "body": "{\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\",\n  \"email\": \"john@example.com\",\n  \"phone\": \"1-770-736-8031 x56442\",\n  \"website\": \"hildegard.org\"\n}",
      "body_type": "raw",
      "pre_request_script": "// Generate a random user ID\npm.environment.set('random_user_id', Math.floor(Math.random() * 1000));",
      "tests": "pm.test('Status code is 201', function () {\n    pm.response.to.have.status(201);\n});\n\npm.test('Response contains created user data', function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData.name).to.eql('John Doe');\n    pm.expect(jsonData.email).to.eql('john@example.com');\n});",
      "description": "Create a new user with POST request and JSON body",
      "created_at": "2024-01-01T00:00:00",
      "updated_at": "2024-01-01T00:00:00"
    },
    {
      "id": "update-user",
      "name": "Update User",
      "method": "PUT",
      "url": "https://jsonplaceholder.typicode.com/users/1",
      "headers": {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      "params": {},
      "body": "{\n  \"id\": 1,\n  \"name\": \"Updated Name\",\n  \"username\": \"updateduser\",\n  \"email\": \"updated@example.com\",\n  \"phone\": \"1-770-736-8031 x56442\",\n  \"website\": \"updated.org\"\n}",
      "body_type": "raw",
      "pre_request_script": "",
      "tests": "pm.test('Status code is 200', function () {\n    pm.response.to.have.status(200);\n});\n\npm.test('User name was updated', function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.name).to.eql('Updated Name');\n});",
      "description": "Update an existing user with PUT request",
      "created_at": "2024-01-01T00:00:00",
      "updated_at": "2024-01-01T00:00:00"
    },
    {
      "id": "delete-user",
      "name": "Delete User",
      "method": "DELETE",
      "url": "https://jsonplaceholder.typicode.com/users/1",
      "headers": {
        "Accept": "application/json"
      },
      "params": {},
      "body": "",
      "body_type": "none",
      "pre_request_script": "",
      "tests": "pm.test('Status code is 200', function () {\n    pm.response.to.have.status(200);\n});",
      "description": "Delete a user with DELETE request",
      "created_at": "2024-01-01T00:00:00",
      "updated_at": "2024-01-01T00:00:00"
    }
  ],
  "folders": [],
  "created_at": "2024-01-01T00:00:00",
  "updated_at": "2024-01-01T00:00:00"
} 