name: Pull Request Validation

on:
  pull_request:
    branches: [ develop ]
  push:
    branches: [ develop ]

jobs:
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools>=78.1.1
        pip install -r requirements.txt
        pip install -r requirements-security.txt
        
    - name: Run Safety CLI to check for vulnerabilities
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}
        
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
        
    - name: Run Semgrep analysis
      run: |
        semgrep ci --config auto --json --output semgrep-report.json || true
        semgrep ci --config auto
        
    - name: Run pip-audit
      run: |
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-report.json
          semgrep-report.json
          pip-audit-report.json

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: security-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools>=78.1.1
        pip install -r requirements.txt
        pip install -r requirements-security.txt
        
    - name: Check code formatting with Black
      run: |
        black --check --diff src/ tests/ main.py
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/ main.py
        
    - name: Run Flake8 linting
      run: |
        flake8 src/ tests/ main.py --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Run MyPy type checking
      run: |
        mypy src/ --ignore-missing-imports --disallow-untyped-defs
        
    - name: Run Pylint
      run: |
        pylint src/ --disable=C0114,C0116 --max-line-length=88

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies for PySide6
      run: |
        sudo apt-get update
        sudo apt-get install -y libegl1-mesa-dev libgl1 libgl1-mesa-dri xvfb
        
    - name: Start virtual display
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99" >> $GITHUB_ENV
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools>=78.1.1
        pip install -r requirements.txt
        
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.run_number }}
        path: htmlcov/

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: test-suite
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools>=78.1.1
        pip install -r requirements.txt
        
    - name: Test package installation
      run: |
        pip install -e .
        python -c "import sendapi; print('Package imported successfully')"
        
    - name: Test PyInstaller build
      run: |
        pyinstaller --onefile main.py --name sendapi

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Check for outdated dependencies
      run: |
        pip install --upgrade setuptools>=78.1.1
        pip install -r requirements.txt
        pip list --outdated --format=json > outdated-packages.json
        
    - name: Upload outdated packages report
      uses: actions/upload-artifact@v4
      with:
        name: outdated-packages-${{ github.run_number }}
        path: outdated-packages.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-validation, code-quality, test-suite, build-test, dependency-check]
    if: always()
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v4
      
    - name: Create security summary
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        BRANCH_NAME: ${{ github.head_ref }}
        COMMIT_SHA: ${{ github.sha }}
      run: |
        echo "## 🔒 Security Validation Summary" > security-summary.md
        echo "**PR:** #$PR_NUMBER" >> security-summary.md
        echo "**Branch:** $BRANCH_NAME" >> security-summary.md
        echo "**Commit:** $COMMIT_SHA" >> security-summary.md
        echo "**Date:** $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "### 📊 Security Checks" >> security-summary.md
        echo "✅ **Safety (Dependencies):** Checked via Safety CLI action" >> security-summary.md
        
        if [ -f "bandit-report.json" ]; then
          echo "✅ **Bandit (Python Security):** Report generated" >> security-summary.md
        else
          echo "❌ **Bandit (Python Security):** No report found" >> security-summary.md
        fi
        
        if [ -f "semgrep-report.json" ]; then
          echo "✅ **Semgrep (Static Analysis):** Report generated" >> security-summary.md
        else
          echo "❌ **Semgrep (Static Analysis):** No report found" >> security-summary.md
        fi
        
        if [ -f "pip-audit-report.json" ]; then
          echo "✅ **pip-audit (Package Vulnerabilities):** Report generated" >> security-summary.md
        else
          echo "❌ **pip-audit (Package Vulnerabilities):** No report found" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "### 🧪 Quality Checks" >> security-summary.md
        echo "✅ **Code Formatting:** Black and isort" >> security-summary.md
        echo "✅ **Linting:** Flake8 and Pylint" >> security-summary.md
        echo "✅ **Type Checking:** MyPy" >> security-summary.md
        echo "✅ **Tests:** pytest with coverage" >> security-summary.md
        echo "✅ **Build:** Package installation and PyInstaller" >> security-summary.md
        
        echo "" >> security-summary.md
        echo "### 📋 Recommendations" >> security-summary.md
        echo "- Review all security reports for vulnerabilities" >> security-summary.md
        echo "- Address any critical or high severity issues" >> security-summary.md
        echo "- Update outdated dependencies if needed" >> security-summary.md
        echo "- Ensure test coverage meets requirements" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-${{ github.run_number }}
        path: security-summary.md
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          }); 
