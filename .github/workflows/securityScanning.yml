name: Security Scan & Code Validation

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools>=78.1.1
        pip install -r requirements.txt
        pip install safety bandit semgrep
        
    - name: Run Safety CLI to check for vulnerabilities
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}
        

        
    - name: Run Bandit (Python security linter)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
        
    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
        
    - name: Run Semgrep (static analysis)
      run: |
        semgrep ci --config auto --json --output semgrep-report.json || true
        semgrep ci --config auto
        
    - name: Upload Semgrep report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: semgrep-report
        path: semgrep-report.json

  code-quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies for PySide6
      run: |
        sudo apt-get update
        sudo apt-get install -y libegl1-mesa-dev libgl1 libgl1-mesa-dri xvfb
        
    - name: Start virtual display
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99" >> $GITHUB_ENV
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools>=78.1.1
        pip install -r requirements.txt
        pip install flake8 black isort mypy pylint
        
    - name: Run Black (code formatting check)
      run: |
        black --check --diff src/ tests/ main.py
        
    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff src/ tests/ main.py
        
    - name: Run Flake8 (linting)
      run: |
        flake8 src/ tests/ main.py --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Run MyPy (type checking)
      run: |
        mypy src/ --ignore-missing-imports --disallow-untyped-defs
        
    - name: Run Pylint
      run: |
        pylint src/ --disable=C0114,C0116 --max-line-length=88
        
    - name: Run tests (non-GUI)
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
      run: |
        pytest tests/ -m "not gui" --cov=src --cov-report=xml --cov-report=html
        
    - name: Run GUI tests (headless)
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
        QT_LOGGING_RULES: "*.debug=false;qt.qpa.*=false"
      run: |
        pytest tests/ -m "gui" --tb=short || echo "GUI tests failed, continuing..."
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools>=78.1.1
        pip install pip-audit
        
    - name: Run pip-audit
      run: |
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit
        
    - name: Upload pip-audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pip-audit-report
        path: pip-audit-report.json
        
    - name: Check for outdated packages
      run: |
        pip list --outdated --format=json > outdated-packages.json
        
    - name: Upload outdated packages report
      uses: actions/upload-artifact@v4
      with:
        name: outdated-packages
        path: outdated-packages.json

  build-test:
    name: Build & Package Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.13']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies for PySide6
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libegl1-mesa-dev libgl1 libgl1-mesa-dri xvfb
        
    - name: Start virtual display
      if: runner.os == 'Linux'
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99" >> $GITHUB_ENV
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools>=78.1.1
        pip install -r requirements.txt
        
    - name: Run basic tests
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
      run: |
        python -m pytest tests/ -m "not gui" -v
    
    - name: Test PyInstaller build (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile main.py --name sendapi

  notify:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, dependency-update]
    if: always()
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v4
      
    - name: Create security summary
      run: |
        echo "## Security Scan Summary" > security-summary.md
        echo "Date: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "### Safety (Dependency Vulnerabilities)" >> security-summary.md
        echo "- Checked via Safety CLI action" >> security-summary.md
        
        if [ -f "bandit-report.json" ]; then
          echo "### Bandit (Python Security Issues)" >> security-summary.md
          echo "- Report generated" >> security-summary.md
        fi
        
        if [ -f "semgrep-report.json" ]; then
          echo "### Semgrep (Static Analysis)" >> security-summary.md
          echo "- Report generated" >> security-summary.md
        fi
        
        if [ -f "pip-audit-report.json" ]; then
          echo "### pip-audit (Package Vulnerabilities)" >> security-summary.md
          echo "- Report generated" >> security-summary.md
        fi
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md 
